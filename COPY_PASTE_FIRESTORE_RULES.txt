rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - Allow users to read all users (for search) and write their own profile
    match /users/{userId} {
      // Anyone authenticated can read user profiles (needed for search feature)
      allow read: if request.auth != null;
      
      // Allow user creation during registration (before auth is complete)
      // Also allow authenticated users to create and update their own profile
      allow create: if (request.auth == null || request.auth.uid == userId);
      
      // Users can update their own profile (including partner field and pendingRequests)
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Allow other users to add pending requests to this user
      allow update: if request.auth != null 
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['pendingRequests'])
        && request.resource.data.pendingRequests.size() >= resource.data.pendingRequests.size();
      
      // Allow other users to set partner field (for accepting requests)
      allow update: if request.auth != null 
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['partner']);
      
      // Users can delete their own profile
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Posts collection
    match /posts/{postId} {
      // Anyone authenticated can read all posts (to see partner's posts)
      allow read: if request.auth != null;
      
      // Users can create posts with their own userId
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // Users can update their own posts
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Users can delete their own posts
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Allow anyone to update likes and comments on posts
      allow update: if request.auth != null 
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments']);
    }
    
    // Messages collection
    match /messages/{messageId} {
      // Users can read all messages (filtered client-side to show only their conversations)
      // This is necessary for orderBy queries to work properly
      allow read: if request.auth != null;
      
      // Users can create messages where they are the sender
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
      
      // Allow users to update their own messages (for edit functionality if needed)
      allow update: if request.auth != null && request.auth.uid == resource.data.senderId;
      
      // Allow users to delete their own messages
      allow delete: if request.auth != null && request.auth.uid == resource.data.senderId;
    }
    
    // Notes collection
    match /notes/{noteId} {
      // Users can read their own notes
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Users can also read their partner's notes
      allow read: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.partner == resource.data.userId;
      
      // Users can create notes
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // Users can update/delete their own notes
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // OTP Codes collection (for email verification)
    match /otpCodes/{userId} {
      // Allow anyone to read OTP codes (needed for verification before sign-in)
      // This is safe because OTP is only valid for 10 minutes and single-use
      allow read: if true;
      
      // Allow anyone to write OTP codes (needed during registration)
      allow write: if true;
    }
  }
}
